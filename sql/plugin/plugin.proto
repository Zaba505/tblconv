syntax = "proto3";

package proto;

option go_package = "./proto";

service Driver {
  // Login
  rpc Login (LoginRequest) returns (Response);

  // Abstracts reading and writing SQL queries into one API.
  rpc Query (Request) returns (Response);

  // CommitOrAbort a transaction.
  rpc CommitOrAbort (TxnContext) returns (TxnContext);
}

message Request {
	uint64 start_ts = 1;

	string query = 2;
	map<string, string> vars = 3; // Support for SQL template variables

	repeated Mutation mutations = 4;
	bool commit_now = 5; // immediately commit transaction
	string hash = 7;
}

message ListOfString {
    repeated string value = 1;
}

message Response {
  // response will always be JSON formatted for easy
  // column name recognition
	bytes json = 1;
	TxnContext txn = 2;
	Latency latency = 3;
	// Metrics contains all metrics related to the query.
	Metrics metrics = 4;
	// uids contains a mapping of blank_node => uid for the node. It only returns uids
	// that were created as part of a mutation.
	map<string, string> uids = 12;
	map<string, ListOfString> hdrs = 14;
}

message Mutation {
	// TODO
}


message TxnContext {
	uint64 start_ts = 1;
	uint64 commit_ts = 2;
	bool aborted = 3;
	repeated string keys = 4;  // List of keys to be used for conflict detection.
	repeated string preds = 5; // List of predicates involved in this transaction.
	string hash = 6;
}

message Latency {
	uint64 parsing_ns = 1;
	uint64 processing_ns = 2;
	uint64 encoding_ns = 3;
	uint64 assign_timestamp_ns = 4;
	uint64 total_ns = 5;
}

message Metrics {
	// num_uids is the map of number of uids processed by each attribute.
	map<string, uint64> num_uids = 1;
}

message LoginRequest {
	string userid = 1;
	string password = 2;
	string refresh_token = 3;
	uint64 namespace = 4;
}
